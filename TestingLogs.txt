Project 2 Report -- Aislin, Brady & Morgan -- Team Byte-Me

Report-- Code Runthrough
Server
The server is designed to initialize the game details, GameManger, a thread for the server to run the game (gameServer), and the sockets for UDP 
and TCP (1 UDP and loops to accept clients). When players join, they are added into the TCP client thread and are added to the player base in 
GameManger. The gameServer function sets the current question with GameManager and sets the current question, initializes the general timers for 
the TCP clients to follow using global variables, and ends the game when all 20 questions are cycled through. UDP stays open and accepts messages 
from client, which are only sent during the poll time. HandleTCPClient does most of the heavy lifting in server. Synched with each timer in 
gameServer, each TCP thread manages a connection with each client and manages all the sending and recieving of packets from the client. After 
connecting, we send the player's ID before entering the question loop. For each question, we send the question and it's options and test if there 
were any polls sent by clients. If there were none, it skips to the next question. If a client polls, it takes the first responder (from their 
sending time) and allows them to answer, where the TCP client waits for a response. If we get a response, we intake the question number, send it 
into game manager, and send a packet saying "correct" or "wrong". At the end of the answering time, the score is sent to the answering client, 
including to clients who never submitted anything, and sends "next" to clients before moving to the next question. Additionally, the system checks 
with GameManager to see which clients are actively playing, meaning they've polled within the last 3 rounds, and sends a kill message if they've 
surpassed that limit. After the game ends, gameServer runs GameManager to post the winning results and shuts the game down after 100 seconds. 

Client
The client application initializes the user interface with a question label, four initially disabled radio button options, a timer label, a score label 
displaying the player's ID, and "Poll" and initially disabled "Submit" buttons. It establishes both a UDP socket to send poll messages and a persistent 
TCP connection to receive game information and send answers to the server. A separate thread continuously listens for TCP messages from the server, parsing 
them to update the displayed player ID and score, present new questions and answer options (initially disabling them), and start a 15-second poll timer. 
Upon clicking the "Poll" button (if allowed and the client hasn't polled), a "POLL" message and the player's ID are sent via UDP, and the answer options are 
disabled until server acknowledgment. When the server acknowledges the poll with an "ack", the poll timer is stopped, the answer options are enabled, and a 
10-second answer timer begins. Selecting a radio button enables the "Submit" button, and clicking it sends the selected answer index to the server via TCP 
(or "No Answer" if the timer expires without a selection). After submitting or the answer timer expiring, the options and submit button are disabled, and relevant 
flags are reset. The client handles "correct" and "wrong" feedback by disabling the submit button and resetting for the next question, and the "next" message 
prepares the UI for a new question by enabling polling. A "kill" message from the server triggers a "Game Over!" message and terminates the client. The client 
manages its own timers for the polling and answering phases, updating the timer label accordingly, and uses SwingUtilities.invokeLater() for thread-safe UI updates.

Logging -- Tests
Log 1
 - Attempted to hit submit, then select an answer to see how the system would respond
 - Issue(s): Client timer broke on the selecting client, other clients were ok
 - Solution: Lock the submit button until an answer has been selected in order to avoid this bug occuring in the first place       
 Log 2
  - Attempted to submit an answer with two clients connected
  - Issue(s): Client wasn't able to recieve it's score accurately
  - Solution: Added a function to force the score to update in GameManger due to the desync between HandleTCPClient & ServerGame
Log 3
 - Attempting to run through a full game with multiple clients connected
 - Issue(s): Successfully made it through game, however, clients don't shutdown at end, and can still send messages to the server after the games supposed to be over
             We also discovered an error with our autokick system, in the sense that it just doesn't work at allows
 - Solution: To fix shutdown we made it so the players get killed at end of game, to fix autokick we updated our heartbeat system and changed from an arraylist of IDs to direct pulling hashmap keys in GameManager
Log 4
 - Attempted to kill multiple users in the same round to see if the system could handle multiple thread deaths at a time
 - Issue(s): None, code succesfully handled multiple deaths and was able to continue the game after these clients were removed
 Log 5
 - Attempted to add and disconnect several clients to see if the system could handle several dead threads/player objects during runtime
 - Issue(s): (Surprisingly) no problems, the scoreboard at the end was a bit strange with 15 players most of which had no score, but it did ultimately work. 